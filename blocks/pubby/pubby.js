/* eslint-disable */
(()=>{"use strict";var e,t={142:(e,t,r)=>{var n=r(540),o=r(338);const a=({elem:e})=>{const[t,r]=(0,n.useState)("");return((e,t,r=window,o={})=>{(0,n.useEffect)((()=>{if("function"==typeof t){const n=e=>{t(e)};return r.addEventListener(e,n,o),()=>r.removeEventListener(e,n,o)}}),[r,e,t,o])})("userLoggedIn",(e=>r(e.detail.message))),n.createElement("h1",null,"Your new Component ",n.createElement("i",null,"pubby")," is here. State is ",t)};((e,t)=>{const r=document.querySelectorAll(e,t);r.length?r.forEach((e=>t(e))):((e,t)=>{const r=new MutationObserver((()=>{const n=document.querySelector(e);n&&(r.disconnect(),t(n))}));r.observe(document.body,{childList:!0,subtree:!0})})(e,t)})(".pubby",(e=>{if(e){const t=e;(0,o.H)(t).render(n.createElement(a,{elem:t})),t.dataset.reactStatus="loaded"}}))}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var a=r[e]={exports:{}};return t[e](a,a.exports,n),a.exports}n.m=t,e=[],n.O=(t,r,o,a)=>{if(!r){var s=1/0;for(u=0;u<e.length;u++){for(var[r,o,a]=e[u],l=!0,c=0;c<r.length;c++)(!1&a||s>=a)&&Object.keys(n.O).every((e=>n.O[e](r[c])))?r.splice(c--,1):(l=!1,a<s&&(s=a));if(l){e.splice(u--,1);var i=o();void 0!==i&&(t=i)}}return t}a=a||0;for(var u=e.length;u>0&&e[u-1][2]>a;u--)e[u]=e[u-1];e[u]=[r,o,a]},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e={pubby:0};n.O.j=t=>0===e[t];var t=(t,r)=>{var o,a,[s,l,c]=r,i=0;if(s.some((t=>0!==e[t]))){for(o in l)n.o(l,o)&&(n.m[o]=l[o]);if(c)var u=c(n)}for(t&&t(r);i<s.length;i++)a=s[i],n.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return n.O(u)},r=self.webpackChunk_adobe_aem_boilerplate=self.webpackChunk_adobe_aem_boilerplate||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var o=n.O(void 0,["vendor"],(()=>n(142)));o=n.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,